package LeetCode75;

import java.util.LinkedHashMap;
import java.util.Map;

 

class LRUCache{
	private int capacity;
	private Map<Integer,Integer> cache;
	
	public LRUCache(int capacity) {
		this.capacity= capacity;
		this.cache = new LinkedHashMap<Integer, Integer>(capacity,0.75f,true){
			@Override
			protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest){
				return size() > LRUCache.this.capacity;
			}
		};
	}
	
	public int get(int key) {
		return cache.getOrDefault(key, 99);
	}
	public void put(int key, int value ) {
		cache.put(key, value);
	}
	public void printCache() {
		System.out.println(cache);
	}
	public static void main(String[] args){
	LRUCache lru = new LRUCache(3);
	lru.put(1, 1);
	lru.put(2,2);
	lru.put(3,3);
	lru.put(4,4);
	lru.printCache();
	  System.out.println(lru.get(4));
	lru.put(8,8);
	lru.put(5,5);
	lru.printCache();
	}
}
